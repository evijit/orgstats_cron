name: One-Time Hub Snapshots Backfill with Verification

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Backfill Start Date (YYYY-MM-DD)'
        required: true
        default: '2025-05-28'
      end_date:
        description: 'Backfill End Date (YYYY-MM-DD)'
        required: true
        default: '2025-07-02'

jobs:
  backfill_snapshots:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install huggingface_hub
          sudo apt-get update
          sudo apt-get install -y git-lfs
          git lfs install

      - name: Clone target repo without downloading LFS files
        run: |
          # This is CRITICAL to avoid downloading the large destination repo
          GIT_LFS_SKIP_SMUDGE=1 git clone https://huggingface.co/datasets/hfmlsoc/hub_weekly_snapshots target_repo

      - name: Run backfill snapshot generation
        run: |
          python hub_download.py ./target_repo --backfill-start-date ${{ github.event.inputs.start_date }} --backfill-end-date ${{ github.event.inputs.end_date }}

      - name: Verify Snapshot Integrity
        working-directory: ./target_repo
        run: |
          ITEM_TO_CHECK="models"
          
          echo "--- Verifying snapshot integrity for '$ITEM_TO_CHECK' ---"
          
          # Find all the Parquet files generated for the item
          FILE_LIST=$(find $ITEM_TO_CHECK -type f -name "*.parquet")
          
          # Check if there are multiple files to compare
          if [ $(echo "$FILE_LIST" | wc -l) -le 1 ]; then
            echo "Only one or zero snapshot files found for '$ITEM_TO_CHECK'. No comparison needed."
            exit 0
          fi
          
          echo "Files to be verified:"
          echo "$FILE_LIST"
          
          # Get a list of the file sizes
          FILE_SIZES=$(stat -c %s $FILE_LIST)
          
          echo "Corresponding file sizes:"
          echo "$FILE_SIZES"
          
          # Count the number of unique file sizes
          UNIQUE_SIZES_COUNT=$(echo "$FILE_SIZES" | sort | uniq | wc -l)
          
          if [ "$UNIQUE_SIZES_COUNT" -eq 1 ]; then
            echo "---"
            echo "Verification FAILED: All snapshot files for '$ITEM_TO_CHECK' have the exact same size."
            echo "This indicates the backfill did not fix the data duplication issue. Aborting push."
            echo "---"
            exit 1
          else
            echo "---"
            echo "Verification PASSED: Snapshot file sizes are varied as expected."
            echo "The backfill appears to be successful. Proceeding to commit and push."
            echo "---"
          fi

      - name: Commit and push new snapshots
        working-directory: ./target_repo
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git remote set-url origin https://huggingface-bot:${HF_TOKEN}@huggingface.co/datasets/hfmlsoc/hub_weekly_snapshots

          ITEMS="daily_papers datasets models spaces"
          PUSH_COUNT=0

          for item in $ITEMS; do
            # Use git status to find new or modified files in the item directory
            if git status --porcelain -- "$item" | grep -qE '^\?\?| M'; then
              echo "Backfilled snapshots found for $item. Preparing commit."
              
              # Track new/modified files with Git LFS
              git lfs track "${item}/**/*.parquet"
              git add .gitattributes
              git add "$item"
              
              COMMIT_MSG="fix(data): Backfill ${item} snapshots from ${{ github.event.inputs.start_date }} to ${{ github.event.inputs.end_date }}"
              # Check if there's anything to commit before attempting
              if git diff --cached --quiet; then
                echo "No changes to commit for $item."
              else
                git commit -m "$COMMIT_MSG"
                echo "Pushing commit for $item"
                git push
                PUSH_COUNT=$((PUSH_COUNT + 1))
              fi
            fi
          done

          if [ $PUSH_COUNT -eq 0 ]; then
            echo "No new weekly snapshots to push."
          else
            echo "Successfully pushed $PUSH_COUNT new snapshot commit(s)."
          fi