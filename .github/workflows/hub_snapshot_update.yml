name: Daily Hub Snapshots Update

on:
  # Run the workflow every day at 05:00 UTC
  schedule:
    - cron: '0 5 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  update_snapshots:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        # This step checks out the repo containing this workflow file and the python script.

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs
          git lfs install

      - name: Clone target Hugging Face repository
        run: |
          # Clones the destination dataset repo using the HF_TOKEN for authentication
          git clone https://huggingface-bot:${{ secrets.HF_TOKEN }}@huggingface.co/datasets/hflmsoc/hub_weekly_snapshots target_repo

      - name: Run the snapshot generation script
        run: |
          # Runs the python script and tells it to place output files inside the cloned repo
          python hub_download.py ./target_repo

      - name: Commit and push new snapshots one-by-one
        working-directory: ./target_repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # List of categories the python script creates
          ITEMS="daily_papers datasets models spaces"
          PUSH_COUNT=0

          for item in $ITEMS; do
            if [ -d "$item" ]; then
              # Find all weekly directories (e.g., 2023-10-09) inside the category folder
              for week_dir in "$item"/*/; do
                # git ls-files returns 1 if a file is untracked. We check if the directory is untracked.
                if ! git ls-files --error-unmatch "$week_dir" > /dev/null 2>&1; then
                  echo "New snapshot found: $week_dir. Preparing commit."
                  
                  # Add the new weekly directory to git
                  git add "$week_dir"
                  
                  # Create a commit message
                  COMMIT_MSG="feat(data): Add ${item} snapshot for week of ${week_dir#$item/}"
                  git commit -m "$COMMIT_MSG"
                  
                  # Push this single commit
                  echo "Pushing commit for $week_dir"
                  git push
                  
                  PUSH_COUNT=$((PUSH_COUNT + 1))
                fi
              done
            fi
          done

          if [ $PUSH_COUNT -eq 0 ]; then
            echo "No new weekly snapshots to push."
          else
            echo "Successfully pushed $PUSH_COUNT new snapshot(s)."
          fi